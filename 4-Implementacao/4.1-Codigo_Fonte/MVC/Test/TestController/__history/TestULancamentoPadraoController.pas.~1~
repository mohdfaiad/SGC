unit TestULancamentoPadraoController;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, ULancamentoPadraoVo, UContasPagarVO, UCondominioVO, SysUtils,
  DBClient, DBXJSON, UPessoasVO, UCondominioController, ULancamentoPadraoController,
  DBXCommon, UHistoricoVO, UPessoasController, UPlanoCOntasController, Classes,
  UController, UContasReceberVo, DB, UPlanoContasVO, ConexaoBD, SQLExpr, ULoteVO,
  Generics.Collections;

type
  // Test methods for class TLancamentoPadraoController

  TestTLancamentoPadraoController = class(TTestCase)
  strict private
    FLancamentoPadraoController: TLancamentoPadraoController;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestConsultarPorId;
    procedure TestConsultarPorIdNaoEncontrado;
  end;

implementation

procedure TestTLancamentoPadraoController.SetUp;
begin
  FLancamentoPadraoController := TLancamentoPadraoController.Create;
end;

procedure TestTLancamentoPadraoController.TearDown;
begin
  FLancamentoPadraoController.Free;
  FLancamentoPadraoController := nil;
end;

procedure TestTLancamentoPadraoController.TestConsultarPorId;
var
  ReturnValue: TLancamentoPadraoVO;
begin
  ReturnValue := FLancamentoPadraoController.ConsultarPorId(4);
  if(returnvalue <> nil)  then
    check(true,'Lancamento pesquisado com sucesso!')
  else
    check(false,'Lancamento nao encontrado!');
end;

procedure TestTLancamentoPadraoController.TestConsultarPorIdNaoEncontrado;
var
  ReturnValue: TLancamentoPadraoVO;
begin
  ReturnValue := FLancamentoPadraoController.ConsultarPorId(1);
  if(returnvalue <> nil)  then
    check(false,'Lancamento pesquisado com sucesso!')
  else
    check(true,'Lancamento nao encontrado!');
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTLancamentoPadraoController.Suite);
end.


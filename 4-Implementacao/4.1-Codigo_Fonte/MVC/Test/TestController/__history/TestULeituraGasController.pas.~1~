unit TestULeituraGasController;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, UItensLeituraGasController, UCondominioVo, ULeituraGasVO, SysUtils,
  DBClient, DBXJSON, UCondominioController, DBXCommon, Generics.Collections, Classes,
  UController, ULeituraGasController, DB, UITENSLEITURAGASVO, ConexaoBD, SQLExpr;

type
  // Test methods for class TLeituraGasController

  TestTLeituraGasController = class(TTestCase)
  strict private
    FLeituraGasController: TLeituraGasController;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestConsultarPorId;
    procedure TesteConsultarPorIdNaoEncontrado;
  end;

implementation

procedure TestTLeituraGasController.SetUp;
begin
  FLeituraGasController := TLeituraGasController.Create;
end;

procedure TestTLeituraGasController.TearDown;
begin
  FLeituraGasController.Free;
  FLeituraGasController := nil;
end;

procedure TestTLeituraGasController.TestConsultarPorId;
var
  ReturnValue: TLeituraGasVO;
begin
  ReturnValue := FLeituraGasController.ConsultarPorId(1);
  if(returnvalue <> nil)  then
    check(true,'Leitura pesquisada com sucesso!')
  else
    check(False,'Leitura nao encontrada!');
end;

procedure TestTLeituraGasController.TesteConsultarPorIdNaoEncontrado;
var
  ReturnValue: TLeituraGasVO;
begin
  ReturnValue := FLeituraGasController.ConsultarPorId(4);
  if(returnvalue <> nil)  then
    check(false,'Leitura pesquisada com sucesso!')
  else
    check(true,'Leitura nao encontrada!');
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTLeituraGasController.Suite);
end.


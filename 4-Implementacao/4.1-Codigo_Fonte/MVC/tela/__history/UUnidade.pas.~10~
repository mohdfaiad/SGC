unit UUnidade;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, UtelaCadastro, Vcl.StdCtrls,
  Vcl.ExtCtrls, Vcl.ComCtrls, Vcl.Mask, Vcl.Buttons, Vcl.Grids, Vcl.DBGrids, UUnidadeVO, UGenericVO,
  Generics.Collections, UUnidadeController, UPessoa, UPessoasController, UPessoasVO;

type
  TFTelaCadastroUnidade = class(TFTelaCadastro)
    GroupBox2: TGroupBox;
    RadioButtonNome: TRadioButton;
    PageControlUnidade: TPageControl;
    TabSheet1: TTabSheet;
    TabSheet2: TTabSheet;
    TabSheet3: TTabSheet;
    Panel1: TPanel;
    LabelEditNumero: TLabeledEdit;
    EditQtdGas: TEdit;
    Label1: TLabel;
    Label2: TLabel;
    EditAreaTotal: TEdit;
    Label4: TLabel;
    EditFracaoIdeal: TEdit;
    EditObservacao: TEdit;
    Label5: TLabel;
    Panel3: TPanel;
    Panel4: TPanel;
    BtnIncluirProp: TBitBtn;
    BtnAlterarProp: TBitBtn;
    BtnGravarProp: TBitBtn;
    BtnExcluirProp: TBitBtn;
    BtnCancelarProp: TBitBtn;
    BitBtn7: TBitBtn;
    BitBtn8: TBitBtn;
    BitBtn9: TBitBtn;
    BitBtn10: TBitBtn;
    BitBtn11: TBitBtn;
    LabeledEditCodigo: TLabeledEdit;
    BitBtn12: TBitBtn;
    MaskEditDt: TMaskEdit;
    LabelNome: TLabel;
    procedure FormCreate(Sender: TObject);
    function DoSalvar: boolean; override;
    function MontaFiltro: string;
    procedure DoConsultar; override;
    function DoExcluir: boolean; override;
    procedure BitBtnNovoClick(Sender: TObject);
    procedure GridParaEdits; override;
    procedure BitBtn12Click(Sender: TObject);

  private
    { Private declarations }
  public
    { Public declarations }
    function EditsToObject(Unidade: TUnidadeVO): TUnidadeVO;
  end;

var
  FTelaCadastroUnidade: TFTelaCadastroUnidade;
  UnidadeController: TUnidadeController;
  FormPessoaConsulta : TFTelaCadastroPessoa;
  PessoaController : TPessoasController;

implementation

{$R *.dfm}

uses UEmpresaTrab;

{ TFTelaCadastroUnidade }

procedure TFTelaCadastroUnidade.BitBtn12Click(Sender: TObject);
VAR
ObjRetornoVO : TGenericVO;
begin
  FormPessoaConsulta := TFTelaCadastroPessoa.Create(nil);
  FormPessoaConsulta.FechaForm := true;
  FormPessoaConsulta.ShowModal;
  ObjRetornoVO := PessoaController.ConsultarPorId(FormPessoaConsulta.CDSGrid.FieldByName('IDPESSOA').AsInteger);
  FormPessoaConsulta.ObjetoRetornoVO := ObjRetornoVO;
  if (FormPessoaConsulta.ObjetoRetornoVO <> nil) then
  begin
    LabeledEditCodigo.Text:=IntToStr(TPessoasVO(FormPessoaConsulta.ObjetoRetornoVO).idPessoa);
    LabelNome.Caption := TPessoasVO(FormPessoaConsulta.ObjetoRetornoVO).nome;
   // LabelCnpj.Caption := (TCondominioVO(FormCondominioConsulta.ObjetoRetornoVO).Cnpjcpf);
  end;
  FormPessoaConsulta.Release;

end;

procedure TFTelaCadastroUnidade.BitBtnNovoClick(Sender: TObject);
begin
  inherited;
  LabelEditNumero.SetFocus;
end;

procedure TFTelaCadastroUnidade.DoConsultar;
var
  listaUnidade: TObjectList<TUnidadeVO>;
  filtro: string;
begin
  filtro := MontaFiltro;
  listaUnidade := UnidadeController.Consultar(filtro);
  PopulaGrid<TUnidadeVO>(listaUnidade);
end;


function TFTelaCadastroUnidade.DoExcluir: boolean;
var
  Unidade: TUnidadeVO;
begin
  try
    try
      Unidade := TUnidadeVO.Create;
      Unidade.idUnidade := CDSGrid.FieldByName('IDUNIDADE').AsInteger;
      UnidadeController.Excluir(Unidade);
    except
      on E: Exception do
      begin
        ShowMessage('Ocorreu um erro ao excluir o registro: ' + #13 + #13 +
          E.Message);
        Result := false;
      end;
    end;
  finally
  end;
end;

function TFTelaCadastroUnidade.DoSalvar: boolean;
var
  Unidade: TUnidadeVO;
begin
  begin
    Unidade:=EditsToObject(TUnidadeVO.Create);
    try
      try
        if (Unidade.ValidarCamposObrigatorios()) then
        begin
           if (StatusTela = stInserindo) then
           begin
              Unidade.idcondominio := FormEmpresaTrab.CodigoEmpLogada;
              UnidadeController.Inserir(Unidade);
              Result := true;
           end
            else if (StatusTela = stEditando) then
             begin
            Unidade := UnidadeController.ConsultarPorId(CDSGrid.FieldByName('IDUNIDADE')
              .AsInteger);
            Unidade := EditsToObject(Unidade);
            UnidadeController.Alterar(Unidade);
            Result := true;
          end;
        end
        else
          Result := false;
      except
        on E: Exception do
        begin
          ShowMessage(E.Message);
          Result := false;
        end;
      end;
    finally
    end;
end;
end;

function TFTelaCadastroUnidade.EditsToObject(Unidade: TUnidadeVO): TUnidadeVO;
begin
  Unidade.numero := StrToInt(LabelEditNumero.Text);
  Unidade.vlgasinicial := EditQtdGas.Text;
  Unidade.vlareatotal := EditAreaTotal.Text;
  Unidade.vlfracaoideal := EditFracaoIdeal.Text;
  Unidade.observacao := EditObservacao.Text;

  Result := Unidade;

end;

procedure TFTelaCadastroUnidade.FormCreate(Sender: TObject);
begin
  ClasseObjetoGridVO := TUnidadeVO;
  RadioButtonNome.Checked := true;
  inherited;
end;

procedure TFTelaCadastroUnidade.GridParaEdits;
var
  Unidade: TUnidadeVO;
begin
  inherited;

  Unidade := nil;
  if not CDSGrid.IsEmpty then
    Unidade := UnidadeController.ConsultarPorId(CDSGrid.FieldByName('IDUNIDADE')
      .AsInteger);

  if Unidade <> nil then
  begin
    LabelEditNumero.Text := IntToStr(Unidade.Numero);
    EditQtdGas.Text := Unidade.vlgasinicial;
    EditAreaTotal.Text := Unidade.vlareatotal;
    EditFracaoIdeal.Text := Unidade.vlfracaoideal;
    EditObservacao.Text := Unidade.observacao;
  end;
end;

function TFTelaCadastroUnidade.MontaFiltro: string;
begin
  Result := ' ( IDCONDOMINIO = '+inttostr(FormEmpresaTrab.CodigoEmpLogada)+ ' ) ';
  if (RadioButtonNome.Checked = true) then
  begin
    if (editBusca.Text <> '') then
    begin
      Result := ' AND ( UPPER(NUMERO) LIKE ' +
        QuotedStr('%' + UpperCase(editBusca.Text) + '%') + ' ) ';
    end;
  end
  else if (RadioButtonNome.Checked = true) then
  begin
    if (editBusca.Text <> '') then
      Result := ' AND ( UPPER(NUMERO) LIKE ' +
        QuotedStr('%' + UpperCase(editBusca.Text) + '%') + ' ) ';
  end;
end;


end.

unit ULeituraGas;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Data.DB, Vcl.StdCtrls, Vcl.Mask,
  Datasnap.DBClient, Vcl.Grids, Vcl.DBGrids, Vcl.Buttons, Vcl.ExtCtrls,
  ULeituraGasVO, ULeituraGasController, UItensLeituraGasController, UItensLeituraGasVo, UTela, UUnidadeController,
  UEmpresaTrab, UUnidadeVo, Generics.Collections, UPrecoGasController;

type
  TFTelaCadastroLeituraGas = class(TForm)
    Panel1: TPanel;
    BitBtnIncluirC: TBitBtn;
    BtnCancelarC: TBitBtn;
    GridLeitura: TDBGrid;
    CDSLeitura: TClientDataSet;
    DSLeitura: TDataSource;
    CDSLeituraIDLEITURAGAS: TIntegerField;
    CDSLeituraDTLEITURA: TDateTimeField;
    CDSLeituraIDCONDOMINIO: TIntegerField;
    Panel2: TPanel;
    GroupBox3: TGroupBox;
    MaskEditDtInicio: TMaskEdit;
    Label4: TLabel;
    DBGridItensLeitura: TDBGrid;
    CDSItensLeitura: TClientDataSet;
    DSItensLeitura: TDataSource;
    CDSItensLeituraIDITENSLEITURAGAS: TIntegerField;
    CDSItensLeituraIDLEITURAGAS: TIntegerField;
    CDSItensLeituraIDUNIDADE: TIntegerField;
    CDSItensLeituraVLMEDIDO: TCurrencyField;
    CDSItensLeituraVLCALCULADO: TCurrencyField;
    CDSItensLeituraDTLEITURA: TDateTimeField;
    CDSItensLeituraDSUNIDADE: TStringField;
    Label10: TLabel;
    editidlcto: TEdit;
    BitBtn1: TBitBtn;
    BitBtn2: TBitBtn;
    Label1: TLabel;
    Edit1: TEdit;
    Panel3: TPanel;
    BitBtn3: TBitBtn;
    BitBtn4: TBitBtn;
    DBGrid1: TDBGrid;
    Panel4: TPanel;
    GroupBox1: TGroupBox;
    Label2: TLabel;
    Label3: TLabel;
    Label5: TLabel;
    MaskEdit1: TMaskEdit;
    Edit2: TEdit;
    Edit3: TEdit;
    DBGrid2: TDBGrid;
    BitBtn5: TBitBtn;
    BitBtn6: TBitBtn;
    Panel5: TPanel;
    BitBtn7: TBitBtn;
    BitBtn8: TBitBtn;
    DBGrid3: TDBGrid;
    Panel6: TPanel;
    GroupBox2: TGroupBox;
    Label6: TLabel;
    Label7: TLabel;
    Label8: TLabel;
    MaskEdit2: TMaskEdit;
    Edit4: TEdit;
    Edit5: TEdit;
    DBGrid4: TDBGrid;
    BitBtn9: TBitBtn;
    BitBtn10: TBitBtn;
    Panel7: TPanel;
    BitBtn11: TBitBtn;
    BitBtn12: TBitBtn;
    DBGrid5: TDBGrid;
    Panel8: TPanel;
    GroupBox4: TGroupBox;
    Label9: TLabel;
    Label11: TLabel;
    Label12: TLabel;
    MaskEdit3: TMaskEdit;
    Edit6: TEdit;
    Edit7: TEdit;
    DBGrid6: TDBGrid;
    BitBtn13: TBitBtn;
    BitBtn14: TBitBtn;
    Panel9: TPanel;
    BitBtn15: TBitBtn;
    BitBtn16: TBitBtn;
    DBGrid7: TDBGrid;
    BitBtnAltera: TBitBtn;
    Panel10: TPanel;
    GroupBox5: TGroupBox;
    Label13: TLabel;
    Label14: TLabel;
    Label15: TLabel;
    MaskEdit4: TMaskEdit;
    Edit8: TEdit;
    Edit9: TEdit;
    DBGrid8: TDBGrid;
    BitBtn17: TBitBtn;
    BitBtn18: TBitBtn;
    procedure BitBtnIncluirCClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure CDSItensLeituraVLMEDIDOChange(Sender: TField);
    procedure BitBtn1Click(Sender: TObject);
    procedure BitBtn2Click(Sender: TObject);
    procedure BitBtnAlteraClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
    procedure GridParaEditsItens;
    function EditsToObjectItens (Itens : TItensLeituraGasVO) : TItensLeituraGasVO;
  end;

var
  FTelaCadastroLeituraGas: TFTelaCadastroLeituraGas;
  ControllerLeituraGas: TLeituraGasController;
  ControllerItensLeitura : TItensLeituraGasController;

implementation

{$R *.dfm}

{ TFTelaCadastroLeituraGas }


{ TFTelaCadastroLeituraGas }

procedure TFTelaCadastroLeituraGas.BitBtn1Click(Sender: TObject);
  var ItensLeituraGas : TObjectList<TItensLeituraGasVO>;
      item: TItensLeituraGasVO;
      leitura: TLeituraGAsVO;

begin
 ItensLeituraGas := TObjectList<TItensLeituraGasvO>.Create();
 CDSItensLeitura.First;
 while NOT CDSItensLeitura.Eof do
 begin
    item:= TItensLeituraGasVO.Create;
    item.idUnidade:= CDSItensLeituraIDUNIDADE.AsInteger;
    item.dtLeitura:=StrToDate(MaskEditDtInicio.Text);
    item.vlMedido := CDSItensLeituraVLMEDIDO.AsCurrency;
    item.vlCalculado:= CDSItensLeituraVLCALCULADO.AsCurrency;
    ItensLeituraGas.Add(item);
    CDSItensLeitura.Next;
 end;

 leitura:= TLeituraGasVO.Create;
 leitura.dtLeitura:= StrToDate(MaskEditDtInicio.Text);
 leitura.idCondominio := FormEmpresaTrab.CodigoEmpLogada;
 leitura.ItensLeitura:= ItensLeituraGas;
 ControllerLeituraGas.Inserir(leitura);
end;

procedure TFTelaCadastroLeituraGas.BitBtn2Click(Sender: TObject);
var
  LeituraController : TLeituraGasController;
  leitura : TObjectList<TLeituraGasVO>;
  i : integer;
begin

  Edit1.Text := FloatTOStr(FormEmpresaTRab.PrecoGas);
  Panel10.Visible :=false;

  LeituraController := TLeituraGasController.Create;
  leitura := LeituraController.Consultar('idcondominio = '+ IntToStr(FormEmpresaTrAB.CodigoEmpLogada));
  CdsItensLeitura.EmptyDataSet;

  for I := 0  to leitura.Count - 1 do
  begin
    CDsItensLeitura.Append;
    CDSItensLeituraIDLEITURAGAS.AsInteger := Leitura[i].idLeituraGas;
    CDSItensLeituraDTLEITURA.AsDateTime := leitura[i].dtLeitura;
    CDsItensLeitura.Post;
  end;
  LeituraController.Free;
end;

procedure TFTelaCadastroLeituraGas.BitBtnAlteraClick(Sender: TObject);
var
  unidadeController : TUnidadeController;
  unidades : TObjectList<TUnidadeVO>;
  i : integer;
begin
if CDSItensLeitura.IsEmpty then
    Application.MessageBox('Não existe registro selecionado.', 'Erro',
      MB_OK + MB_ICONERROR)
  else
  begin
  UnidadeController := TUnidadeController.Create;
  Unidades := UnidadeController.Consultar('idcondominio = '+ IntToStr(FormEmpresaTrAB.CodigoEmpLogada));
  CdsItensLeitura.EmptyDataSet;

  for I := 0  to Unidades.Count - 1 do
  begin
    CDsItensLeitura.Append;
    CDSItensLeituraIDUNIDADE.AsInteger := uNIDADES[i].idUnidade;
    CDSItensLeituraDSUNIDADE.AsString := Unidades[i].DsUnidade;
    CDsItensLeitura.Post;
  end;

  Panel10.Visible := true;
  UnidadeController.Free;
end;

end;

procedure TFTelaCadastroLeituraGas.BitBtnIncluirCClick(Sender: TObject);
var
  unidadeController : TUnidadeController;
  unidades : TObjectList<TUnidadeVO>;
  i : integer;
begin

  UnidadeController := TUnidadeController.Create;
  Unidades := UnidadeController.Consultar('idcondominio = '+ IntToStr(FormEmpresaTrAB.CodigoEmpLogada));
  CdsItensLeitura.EmptyDataSet;

  for I := 0  to Unidades.Count - 1 do
  begin
    CDsItensLeitura.Append;
    CDSItensLeituraIDUNIDADE.AsInteger := uNIDADES[i].idUnidade;
    CDSItensLeituraDSUNIDADE.AsString := Unidades[i].DsUnidade;
    CDsItensLeitura.Post;
  end;

  Panel10.Visible := true;
  UnidadeController.Free;
end;

procedure TFTelaCadastroLeituraGas.CDSItensLeituraVLMEDIDOChange(
  Sender: TField);
begin
  CDSItensLeituraVLCALCULADO.AsCurrency := CDSItensLeituraVLMEDIDO.AsCurrency * StrToCurr(Edit1.Text);
end;

function TFTelaCadastroLeituraGas.EditsToObjectItens(
  Itens: TItensLeituraGasVO): TItensLeituraGasVO;
begin

  if not CDSLeitura.IsEmpty then
   begin
    Itens.idLeituraGas := CDSLeitura.FieldByName('IDLEITURAGAS').AsInteger;
   end;
   if (editidlcto.Text<>'') then
   begin
     Itens.idItensLeituraGas := strtoint(editidlcto.Text);
   end;
   if (maskEditDtInicio.Text <> '  /  /    ' ) then
   begin
     Itens.dtLeitura := StrToDateTime(maskEditDtInicio.Text);
   end;

   // como pegar o valor digitado na coluna do grid

end;

procedure TFTelaCadastroLeituraGas.FormCreate(Sender: TObject);
var
  LeituraController : TLeituraGasController;
  leitura : TObjectList<TLeituraGasVO>;
  i : integer;
begin

  Edit1.Text := FloatTOStr(FormEmpresaTRab.PrecoGas);
  Panel10.Visible :=false;

  LeituraController := TLeituraGasController.Create;
  leitura := LeituraController.Consultar('idcondominio = '+ IntToStr(FormEmpresaTrAB.CodigoEmpLogada));
  CdsItensLeitura.EmptyDataSet;

  for I := 0  to leitura.Count - 1 do
  begin
    CDsItensLeitura.Append;
    CDSItensLeituraIDLEITURAGAS.AsInteger := Leitura[i].idLeituraGas;
    CDSItensLeituraDTLEITURA.AsDateTime := leitura[i].dtLeitura;
    CDsItensLeitura.Post;
  end;
  LeituraController.Free;
end;

procedure TFTelaCadastroLeituraGas.GridParaEditsItens;
begin

end;

end.


unit UEstado;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
  System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, UtelaCadastro, Vcl.ComCtrls,
  Vcl.StdCtrls, Vcl.Mask, Vcl.Buttons, Vcl.ExtCtrls, Vcl.Grids, Vcl.DBGrids,
  Generics.Collections, UController, UEstadoVO, UEstadoController;

type
  TFTelaCadastroEstado = class(TFTelaCadastro)
    LabelEditNome: TLabeledEdit;
    LabelEditNomePais: TLabeledEdit;
    btnConsultaEstado: TBitBtn;
    LabelEditPais: TLabeledEdit;
    GroupBox2: TGroupBox;
    RadioButtonNome: TRadioButton;
    procedure DoConsultar; override;
    function DoSalvar: boolean; override;
    function DoExcluir: boolean; override;
    procedure FormCreate(Sender: TObject);
    procedure BitBtnNovoClick(Sender: TObject);
    function MontaFiltro: string;
    function ValidarTela: boolean;
    procedure btnConsultaEstadoClick(Sender: TObject);
    procedure CarregaObjetoSelecionado; override;

  private
    { Private declarations }
  public
    { Public declarations }
    function EditsToObject(Estado: TEstadoVO): TEstadoVO;
    procedure GridParaEdits; override;
  end;

var
  FTelaCadastroEstado: TFTelaCadastroEstado;

implementation

uses UPais, UPaisVO;

var
  // EstadoController: TController<TEstadoVO>;
  EstadoController: TEstadoController;

{$R *.dfm}
  { TFTelaCadastroEstado }

procedure TFTelaCadastroEstado.BitBtnNovoClick(Sender: TObject);
begin
  inherited;
  LabelEditNome.SetFocus;
end;

procedure TFTelaCadastroEstado.btnConsultaEstadoClick(Sender: TObject);
var
  FormPaisConsulta: TFTelaCadastroPais;
begin
  FormPaisConsulta := TFTelaCadastroPais.Create(nil);
  FormPaisConsulta.FechaForm := true;
  FormPaisConsulta.ShowModal;
  if (FormPaisConsulta.ObjetoRetornoVO <> nil) then
  begin
    LabelEditPais.Text :=
      IntToStr(TPaisVO(FormPaisConsulta.ObjetoRetornoVO).idPais);
    LabelEditNomePais.Text := TPaisVO(FormPaisConsulta.ObjetoRetornoVO)
      .NomePais;
  end;
  FormPaisConsulta.Release;
end;

procedure TFTelaCadastroEstado.CarregaObjetoSelecionado;
var
  controllerPais: TController<TPaisVO>;
begin
  inherited;
  if (not CDSGrid.IsEmpty) then
  begin
    ObjetoRetornoVO := TEstadoVO.Create;
    TEstadoVO(ObjetoRetornoVO).idEstado := CDSGrid.FieldByName('IDESTADO')
      .AsInteger;
    TEstadoVO(ObjetoRetornoVO).nomeEstado :=
      CDSGrid.FieldByName('NOMEESTADO').AsString;
    TEstadoVO(ObjetoRetornoVO).idPais := CDSGrid.FieldByName('IDPAIS')
      .AsInteger;

    controllerPais := TController<TPaisVO>.Create;
    TEstadoVO(ObjetoRetornoVO).PaisVO := controllerPais.ConsultarPorId
      (CDSGrid.FieldByName('IDPAIS').AsInteger);
    FreeAndNil(controllerPais);
  end;
end;

procedure TFTelaCadastroEstado.DoConsultar;
var
  listaEstado: TObjectList<TEstadoVO>;
  filtro: string;
begin
  filtro := MontaFiltro;
  listaEstado := EstadoController.Consultar(filtro);
  PopulaGrid<TEstadoVO>(listaEstado);
end;

function TFTelaCadastroEstado.DoExcluir: boolean;
var
  Estado: TEstadoVO;
begin
  try
    try
      Estado := TEstadoVO.Create;
      Estado.idEstado := CDSGrid.FieldByName('IDESTADO').AsInteger;
      EstadoController.Excluir(Estado);
    except
      on E: Exception do
      begin
        ShowMessage('Ocorreu um erro ao excluir o registro: ' + #13 + #13 +
          E.Message);
        Result := false;
      end;
    end;
  finally
  end;
end;

function TFTelaCadastroEstado.DoSalvar: boolean;
var
  Estado: TEstadoVO;
begin
 begin
   Estado:=EditsToObject(TPaisVo.Create);
    try
      try
        if (Estado.ValidarCamposObrigatorios()) then
        begin
          if (StatusTela = stInserindo) then
          begin
            EstadoController.Inserir(Estado);
            Result := true;
          end
          else if (StatusTela = stEditando) then
          begin
            Estado := PaisController.ConsultarPorId(CDSGrid.FieldByName('IDCNAE')
              .AsInteger);
            Estado := EditsToObject(Estado);
            EstadoController.Alterar(Estado);
            Result := true;
          end;
        end
        else
          Result := false;
      except
        on E: Exception do
        begin
          ShowMessage(E.Message);
          Result := false;
        end;
      end;
    finally
    end;
 end;
end;

function TFTelaCadastroEstado.EditsToObject(Estado: TEstadoVO): TEstadoVO;
begin
  Estado.nomeEstado := LabelEditNome.Text;

  if (LabelEditPais.Text <> '') then
    Estado.idPais := strtoint(LabelEditPais.Text);
  Result := Estado;
end;

procedure TFTelaCadastroEstado.FormCreate(Sender: TObject);
begin
  ClasseObjetoGridVO := TEstadoVO;
  RadioButtonNome.Checked := true;
  inherited;
end;

procedure TFTelaCadastroEstado.GridParaEdits;
var
  Estado: TEstadoVO;
begin
  inherited;

  Estado := nil;
  if not CDSGrid.IsEmpty then
    Estado := EstadoController.ConsultarPorId(CDSGrid.FieldByName('IDESTADO')
      .AsInteger);

  if Estado <> nil then
  begin
    LabelEditNome.Text := Estado.nomeEstado;
    if (Estado.idPais > 0) then
    begin
      LabelEditPais.Text := IntToStr(Estado.PaisVO.idPais);
      LabelEditNomePais.Text := Estado.PaisVO.NomePais;
    end;
  end;
end;

function TFTelaCadastroEstado.MontaFiltro: string;
begin
  Result := '';
  if (editBusca.Text <> '') then
    Result := '( UPPER(NOMEESTADO) LIKE ' +
      QuotedStr('%' + UpperCase(editBusca.Text) + '%') + ' ) ';

end;

end.

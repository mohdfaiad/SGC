unit Upessoa;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
  System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, UtelaCadastro, Vcl.DBCtrls,
  Vcl.ExtCtrls, Vcl.StdCtrls, Vcl.ComCtrls, Vcl.Mask, Vcl.Buttons, Vcl.Grids,
  Vcl.DBGrids, Generics.Collections, UTela, UController, UPessoasVO,
  UPessoasController;

type
  TFTelaCadastroPessoa = class(TFTelaCadastro)
    ScrollBox1: TScrollBox;
    LabelEditNome: TLabeledEdit;
    MaskEditCNPJCPF: TMaskEdit;
    MaskEditCep: TMaskEdit;
    LabelEditRua: TLabeledEdit;
    LabelEditNumero: TLabeledEdit;
    LabelEditComplemento: TLabeledEdit;
    LabelEditBairro: TLabeledEdit;
    MaskEditTelefone: TMaskEdit;
    MaskEditTelefone2: TMaskEdit;
    LabelEditEmail: TLabeledEdit;
    Telefone_1: TLabel;
    Telefone_2: TLabel;
    Cep: TLabel;
    LabelCnpj: TLabel;
    GroupBox2: TGroupBox;
    RadioButtonCnpj: TRadioButton;
    RadioButtonNome: TRadioButton;
    LabeledEditDescCidade: TLabeledEdit;
    btnConsultaCidade: TBitBtn;
    LabeledEditCidade: TLabeledEdit;
    LabeledEditEstado: TLabeledEdit;
    LabeledEditPais: TLabeledEdit;
    LabeledEditDescEstado: TLabeledEdit;
    BtnConsultaEstado: TBitBtn;
    LabeledEditDescPais: TLabeledEdit;
    BtnConsultaPais: TBitBtn;
    procedure FormCreate(Sender: TObject);
    function DoSalvar: boolean; override;
    function MontaFiltro: string;
    procedure DoConsultar; override;
    function DoExcluir: boolean; override;
    procedure BitBtnNovoClick(Sender: TObject);
    procedure btnConsultaCidadeClick(Sender: TObject);
    procedure BtnConsultaEstadoClick(Sender: TObject);
    procedure BtnConsultaPaisClick(Sender: TObject);

  private

  public
    procedure GridParaEdits; override;
    function EditsToObject(Pessoa: TPessoasVO): TPessoasVO;
  end;

var
  FTelaCadastroPessoa: TFTelaCadastroPessoa;

implementation

{$R *.dfm}

uses UCnae, UCnaeVO, UCidade, UCidadeVO, UEstado, UEstadoVO, UPais, UPaisVO;

var
  PessoaController: TPessoasController;

procedure TFTelaCadastroPessoa.BitBtnNovoClick(Sender: TObject);
begin
  inherited;
  LabelEditNome.SetFocus;
end;

procedure TFTelaCadastroPessoa.btnConsultaCidadeClick(Sender: TObject);
var
  FormCidadeConsulta: TTFTelaCadastroCidade;
begin
  FormCidadeConsulta := TTFTelaCadastroCidade.Create(nil);
  FormCidadeConsulta.FechaForm := true;
  FormCidadeConsulta.ShowModal;
  if (FormCidadeConsulta.ObjetoRetornoVO <> nil) then
  begin
    LabeledEditCidade.Text := IntToStr(TCidadeVO(FormCidadeConsulta.ObjetoRetornoVO).idCidade);
    LabeledEditDescCidade.Text := TCidadeVO(FormCidadeConsulta.ObjetoRetornoVO)
      .NomeCidade;

  end;
  FormCidadeConsulta.Release;
end;

procedure TFTelaCadastroPessoa.BtnConsultaEstadoClick(Sender: TObject);
var
  FormEstadoConsulta: TFTelaCadastroEstado;
begin
  FormEstadoConsulta := TFTelaCadastroEstado.Create(nil);
  FormEstadoConsulta.FechaForm := true;
  FormEstadoConsulta.ShowModal;
  if (FormEstadoConsulta.ObjetoRetornoVO <> nil) then
  begin
    LabeledEditEstado.Text := IntToStr(TEstadoVO(FormEstadoConsulta.ObjetoRetornoVO).idEstado);
    LabeledEditDescEstado.Text := TEstadoVO(FormEstadoConsulta.ObjetoRetornoVO).NomeEstado;
  end;
  FormEstadoConsulta.Release;
end;
procedure TFTelaCadastroPessoa.BtnConsultaPaisClick(Sender: TObject);
var
  FormPaisConsulta: TFTelaCadastroPais;
begin
  FormPaisConsulta := TFTelaCadastroPais.Create(nil);
  FormPaisConsulta.FechaForm := true;
  FormPaisConsulta.ShowModal;
  if (FormPaisConsulta.ObjetoRetornoVO <> nil) then
  begin
    LabeledEditPais.Text :=
      IntToStr(TPaisVO(FormPaisConsulta.ObjetoRetornoVO).idPais);
    LabeledEditDescPais.Text := TPaisVO(FormPaisConsulta.ObjetoRetornoVO).NomePais;
  end;
  FormPaisConsulta.Release;
end;

procedure TFTelaCadastroPessoa.DoConsultar;
var
  listaPessoa: TObjectList<TPessoasVO>;
  filtro: string;
begin
  filtro := MontaFiltro;
  listaPessoa := PessoaController.Consultar(filtro);
  PopulaGrid<TPessoasVO>(listaPessoa);
end;

function TFTelaCadastroPessoa.DoExcluir: boolean;
var
  Pessoa: TPessoasVO;
begin
  try
    try
      Pessoa := TPessoasVO.Create;
      Pessoa.idPessoa := CDSGrid.FieldByName('IDPESSOA').AsInteger;
      PessoaController.Excluir(Pessoa);
    except
      on E: Exception do
      begin
        ShowMessage('Ocorreu um erro ao excluir o registro: ' + #13 + #13 +
          E.Message);
        Result := false;
      end;
    end;
  finally
  end;

end;

function TFTelaCadastroPessoa.DoSalvar: boolean;
var
  Pessoa: TPessoasVO;
begin
    Pessoa:=EditsToObject(TPessoasVO.Create);
    try
      try
        if (Pessoa.ValidarCamposObrigatorios()) then
        begin
          if ((length(Pessoa.Cnpjcpf)) <= 11) then
          begin
            pessoa.ValidaCPF(Pessoa.Cnpjcpf)
          end
          else if (length(Pessoa.Cnpjcpf) >= 14) then
          begin
            Pessoa.ValidaCnpj(Pessoa.Cnpjcpf)
          end;
          if (StatusTela = stInserindo) then
          begin
            pessoa.MascaraCnpjCpf(Pessoa.Cnpjcpf);
//            Pessoa.Cnpjcpf := MaskEditCNPJCPF.Text;
            PessoaController.Inserir(pessoa);
            result := true;
          end;
          end

          else if (StatusTela = stEditando) then
          begin
            Pessoa := PessoaController.ConsultarPorId(CDSGrid.FieldByName('IDPESSOA')
              .AsInteger);
            Pessoa := EditsToObject(Pessoa);
            PessoaController.Alterar(Pessoa);
            Result := true;
          end
        else
          Result := false;
      except
        on E: Exception do
        begin
          ShowMessage(E.Message);
          Result := false;
        end;
      end;
    finally
    end;
end;

function TFTelaCadastroPessoa.EditsToObject(Pessoa: TPessoasVO): TPessoasVO;
begin
  Pessoa.CnpjCpf := MaskEditCNPJCPF.Text;
  Pessoa.Nome := LabelEditNome.Text;
  Pessoa.Endereco := LabelEditRua.Text;
  Pessoa.Bairro := LabelEditBairro.Text;
  Pessoa.Cep := MaskEditCep.Text;
  Pessoa.Numero := LabelEditNumero.Text;
  Pessoa.Complemento := LabelEditComplemento.Text;
  Pessoa.Email := LabelEditEmail.Text;
  Pessoa.TelefoneI := MaskEditTelefone.Text;
  Pessoa.TelefoneII := MaskEditTelefone2.Text;
  if (LabeledEditCidade.Text <> '') then
    Pessoa.IdCidade := strtoint(LabeledEditCidade.Text);
  if (LabeledEditEstado.Text<> '') then
    Pessoa.idEstado := strtoint(LabeledEditEstado.Text);
  if (LabeledEditPais.Text<>'') then
    Pessoa.idPais := strtoint(LabeledEditPais.Text);
//  if (LabelEditCodCnae.Text <> '') then
//    Pessoa.idCnae := strtoint(LabelEditCodCnae.Text);
  Result := Pessoa;
end;

procedure TFTelaCadastroPessoa.FormCreate(Sender: TObject);
begin
  ClasseObjetoGridVO := TPessoasVO;
  RadioButtonNome.Checked := true;
  inherited;
end;

procedure TFTelaCadastroPessoa.GridParaEdits;
var
  Pessoa: TPessoasVO;
begin
  inherited;

  Pessoa := nil;
  if not CDSGrid.IsEmpty then
    Pessoa := PessoaController.ConsultarPorId(CDSGrid.FieldByName('IDPESSOA')
      .AsInteger);

  if Pessoa <> nil then
  begin
    LabelEditNome.Text := Pessoa.Nome;
    LabelEditRua.Text := Pessoa.Endereco;
    LabelEditBairro.Text := Pessoa.Bairro;
    MaskEditCep.Text := Pessoa.Cep;
    LabelEditNumero.Text := Pessoa.Numero;
    LabelEditComplemento.Text := Pessoa.Complemento;
    MaskEditCNPJCPF.Text := Pessoa.CnpjCpf;
    LabelEditEmail.Text := Pessoa.Email;
    MaskEditTelefone.Text := Pessoa.TelefoneI;
    MaskEditTelefone2.Text := Pessoa.TelefoneII;
    if (Pessoa.idCidade > 0) then
    begin
      LabeledEditCidade.Text := IntToStr(Pessoa.CidadeVO.idCidade);
      LabeledEditDescCidade.Text := Pessoa.CidadeVO.NomeCidade;
    end;
    if (Pessoa.idEstado > 0) then
    begin
      LabeledEditEstado.Text := IntToStr(Pessoa.EstadoVO.idEstado);
      LabeledEditDescEstado.Text := Pessoa.EstadoVO.NomeEstado;
    end;
     if (Pessoa.idPais > 0) then
    begin
      LabeledEditPais.Text := IntToStr(Pessoa.PaisVO.idPais);
      LabeledEditDescPais.Text := Pessoa.PaisVO.NomePais;
    end;
  end;

end;

function TFTelaCadastroPessoa.MontaFiltro: string;
begin
  Result := '';
  if (RadioButtonCnpj.Checked = true) then
  begin
    if (editBusca.Text <> '') then
    begin
      Result := '( UPPER(CPFCNPJ) LIKE ' +
        QuotedStr('%' + UpperCase(editBusca.Text) + '%') + ' ) ';
    end;
  end
  else if (RadioButtonNome.Checked = true) then
  begin
    if (editBusca.Text <> '') then
      Result := '( UPPER(NOME) LIKE ' +
        QuotedStr('%' + UpperCase(editBusca.Text) + '%') + ' ) ';
  end;
end;
end.

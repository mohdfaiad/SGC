unit UPrecoGas;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, UtelaCadastro, Vcl.StdCtrls,
  Vcl.ComCtrls, Vcl.Mask, Vcl.Buttons, Vcl.ExtCtrls, Vcl.Grids, Vcl.DBGrids, UPrecoGasVO,
  Generics.Collections, UPrecoGasController, UEmpresaTrab;

type
  TFTelaCadastroPrecoGas = class(TFTelaCadastro)
    MaskEditDtInicio: TMaskEdit;
    Label1: TLabel;
    EdtValor: TEdit;
    Label2: TLabel;
    Label6: TLabel;
    LabeledEditPessoa: TEdit;
    BitBtn3: TBitBtn;
    LabeledEditNomePessoa: TEdit;
    procedure FormCreate(Sender: TObject);
    function DoSalvar: boolean; override;
    function MontaFiltro: string;
    procedure DoConsultar; override;
    function DoExcluir: boolean; override;
    procedure BitBtnNovoClick(Sender: TObject);
    procedure GridParaEdits; override;
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
  private
    { Private declarations }
  public
    { Public declarations }
     function EditsToObject(PrecoGas: TPrecoGasVO): TPrecoGasVO;
  end;

var
  FTelaCadastroPrecoGas: TFTelaCadastroPrecoGas;
  ControllerPrecoGas : TPrecoGasController;

implementation

{$R *.dfm}

{ TFTelaCadastro1 }

procedure TFTelaCadastroPrecoGas.BitBtnNovoClick(Sender: TObject);
begin
  inherited;
  MaskEditDtInicio.SetFocus;
end;

procedure TFTelaCadastroPrecoGas.DoConsultar;
var
  listaPrecoGas: TObjectList<TPrecoGasVo>;
  filtro: string;
begin
  filtro := MontaFiltro;
  listaPrecoGas := ControllerPrecoGas.Consultar(filtro);
  PopulaGrid<TPrecoGasVo>(listaPrecoGas);
end;

function TFTelaCadastroPrecoGas.DoExcluir: boolean;
var
  PrecoGas : TPrecoGasVo;
begin
  try
    try
      PrecoGas := TPrecoGasVo.Create;
      PrecoGas.idPrecoGas := CDSGrid.FieldByName('IDPRECOGAS')
        .AsInteger;
      ControllerPrecoGas.Excluir(PrecoGas);
    except
      on E: Exception do
      begin
        ShowMessage('Ocorreu um erro ao excluir o registro: ' + #13 + #13 +
          E.Message);
        Result := false;
      end;
    end;
  finally
  end;
end;


function TFTelaCadastroPrecoGas.DoSalvar: boolean;
var
  PrecoGas : TPrecoGasVo;
begin
  begin
    PrecoGas:=EditsToObject(TPrecoGasVo.Create);
    try
      try
        if (PrecoGas.ValidarCamposObrigatorios()) then
        begin
           if (StatusTela = stInserindo) then
           begin
              PrecoGas.idcondominio := FormEmpresaTrab.CodigoEmpLogada;
              ControllerPrecoGas.Inserir(PrecoGas);
              Result := true;
           end
            else if (StatusTela = stEditando) then
             begin
            PrecoGas := ControllerPrecoGas.ConsultarPorId(CDSGrid.FieldByName('IDPRECOGAS')
              .AsInteger);
            PrecoGas := EditsToObject(PrecoGas);
            ControllerPrecoGas.Alterar(PrecoGas);
            Result := true;
          end;
        end
        else
          Result := false;
      except
        on E: Exception do
        begin
          ShowMessage(E.Message);
          Result := false;
        end;
      end;
    finally
    end;
end;
end;

function TFTelaCadastroPrecoGas.EditsToObject(PrecoGas: TPrecoGasVO): TPrecoGasVO;
begin
  if EdtValor.Text <> '' then
    PrecoGas.vlGas := StrToFloat(EdtValor.Text);
  if MaskEditDtInicio.Text <> '' then
    PrecoGas.dtMesAno := StrToDateTime(MaskEditDtInicio.Text);
  if (LabeledEditPessoa.Text <> '') then
    PrecoGas.idPessoa := strtoint(LabeledEditPessoa.Text);

  Result := PrecoGas;
end;

procedure TFTelaCadastroPrecoGas.FormClose(Sender: TObject;
  var Action: TCloseAction);
begin
  inherited;
  FreeAndNil(ControllerPrecoGas);

end;

procedure TFTelaCadastroPrecoGas.FormCreate(Sender: TObject);
begin
  ClasseObjetoGridVO := TPrecoGasVO;
  ControllerPrecoGas := TPrecoGasController.Create;
  inherited;
end;

procedure TFTelaCadastroPrecoGas.GridParaEdits;
var
  PrecoGas: TPrecoGasVO;
begin
  inherited;
  if not CDSGrid.IsEmpty then
    PrecoGas := ControllerPrecoGas.ConsultarPorId
      (CDSGrid.FieldByName('IDPRECOGAS').AsInteger);

  if Assigned(PrecoGas) then
  begin
    if PrecoGas.PessoaVO <> nil then
    begin
      LabeledEditPessoa.Text := IntToStr(PrecoGas.PessoaVO.idPessoa);
      LabeledEditNomePessoa.Text := PrecoGas.PessoaVO.nome;
    end;
    EdtValor.Text := FloatToStr(PrecoGas.vlGas);
    MaskEditDtInicio.Text := DateTimeToStr(PrecoGas.dtMesAno);

  end;
end;

function TFTelaCadastroPrecoGas.MontaFiltro: string;
begin
    result := '';
end;

end.

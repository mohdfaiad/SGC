unit UUnidadeVO;

Interface

uses Atributos, Classes, Constantes, Generics.Collections, SysUtils, UGenericVO,UCnaeVO, UCondominioVO;

type
  [TEntity]
  [TTable('unidade')]
  TUnidadeVO = class(TGenericVO)
  private
    Fidunidade: Integer;
    Fvlgasinicial: String;
    Fvlareatotal: String;
    Fvlfracaoideal: String;
    Fidcondominio: Integer;
    Fnumero : Integer;
    Fobservacao : String;
  public
    CondominioVO : TCondominioVO;

    [TId('idunidade')]
    [TGeneratedValue(sAuto)]
    property idUnidade: Integer  read Fidunidade write Fidunidade;
    [TColumn('vlgasinicial','Gás Inicial',130,[ldLookup,ldComboBox], False)]
    property vlgasinicial: String  read Fvlgasinicial write Fvlgasinicial;
    [TColumn('vlareatotal','Área Total',50,[ldGrid,ldLookup,ldComboBox], False)]
    property vlareatotal: String  read Fvlareatotal write Fvlareatotal;
    [TColumn('vlfracaoideal','Fração Ideal',50,[ldGrid,ldLookup,ldComboBox], False)]
    property vlfracaoideal: String  read Fvlfracaoideal write Fvlfracaoideal;
    [TColumn('idcondominio','IdCondominio',50,[ldLookup,ldComboBox], False)]
    property idcondominio: Integer  read Fidcondominio write Fidcondominio;
    [TColumn('numero','Número',50,[ldGrid,ldLookup,ldComboBox], False)]
    property numero: Integer  read Fnumero write Fnumero;
    [TColumn('observacao','Observação',500,[ldLookup,ldComboBox], False)]
    property observacao: String  read Fobservacao write Fobservacao;

    procedure ValidarCamposObrigatorios;


  end;

implementation

{ TUnidadeVO }

procedure TUnidadeVO.ValidarCamposObrigatorios;
begin
  if (Self.Fnumero = 0) then
  begin
    raise Exception.Create('O campo Número é obrigatório!');
  end;
   if (Self.FvlAreaTotal = 0) then
  begin
    raise Exception.Create('O campo Área Total é obrigatório!');
  end;
   if (Self.Fvlfracaoideal = 0) then
  begin
    raise Exception.Create('O campo Fração Ideal é obrigatório!');
  end;
end;

end.

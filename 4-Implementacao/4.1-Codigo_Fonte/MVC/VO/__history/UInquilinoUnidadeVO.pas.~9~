unit UInquilinoUnidadeVO;

interface

uses Atributos, Classes, Constantes, Generics.Collections, SysUtils, UGenericVO, UCondominioVO, UPessoasVO;

type
  [TEntity]
  [TTable('InquilinoUnidade')]
  TInquilinoUnidadeVO = class(TGenericVO)
  private
    FidInquilinounidade: Integer;
    FidUnidade: Integer;
    FidPessoa : Integer;
    FdtInicio : TdateTime;
    FNomePessoa : string;

  public
    CondominioVO : TCondominioVO;
    PessoaVo : TPessoasVO;

    [TId('idinquilinounidade')]
    [TGeneratedValue(sAuto)]
    property idInquilino: Integer  read FidInquilinounidade write FidInquilinounidade;
    [TColumn('idunidade','Unidade',50,[ldGrid,ldLookup,ldComboBox], False)]
    property IdUnidade: Integer  read FidUnidade write FidUnidade;
    [TColumn('idpessoa','id Pessoa',50,[ldLookup,ldComboBox], False)]
    property idPessoa: Integer  read FidPessoa write FidPessoa;
    [TColumn('DtInicio','Data Inicio',0,[ldLookup,ldComboBox], False)]
    property DtInicio: TDateTime  read FdtInicio write FdtInicio;

    [TColumn('nomepessoa','Pessoa',0,[ldGrid], True, 'Pessoa', 'idPessoa', 'idPessoa')]
    property NomePessoa: string  read FNomePessoa write FNomePessoa;

    procedure ValidarCampos;

  end;

  implementation

  { TProprietarioUnidadeVO }

procedure TInquilinoUnidadeVO.ValidarCampos;
begin

  if (Self.FidInquilinounidade = 0) then
  begin
    raise Exception.Create('O campo Inquilino é obrigatório!');

  end
  else if (self.FdtInicio = 0) then
  begin
    raise Exception.Create('O campo data é obrigatório!');

  end;
end;

end.


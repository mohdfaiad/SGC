unit UPrecoGasVO;

interface

uses Atributos, Classes, Constantes, Generics.Collections, SysUtils, UGenericVO,UCnaeVO, UCidadeVO, UEstadoVO, UPaisVO, UPessoasVO;

type
  [TEntity]
  [TTable('PrecoGas')]
  TPrecoGasVO = class(TGenericVO)
  private
    FidPrecoGas: Integer;
    FdtMesAno : TdateTime;
    FvlGas : currency;
    FidCondominio: Integer;
    FNome : String;
    FidPessoa : Integer;
  public
    PessoaVo : TPessoasVO;

    [TId('idprecogas')]
    [TGeneratedValue(sAuto)]
    property idPrecoGas: Integer  read FidPrecoGas write FidPrecoGas;
    [TColumn('dtMesAno','Data Inicio',0,[ldLookup,ldComboBox], False)]
    property dtMesAno: TDateTime  read FdtMesAno write FdtMesAno;
    [TColumn('idcondominio','Condominio',0,[ldLookup,ldComboBox], False)]
    property idCondominio: integer  read FidCondominio write FidCondominio;

    [TColumn('idPessoa','Pessoa',0,[ldLookup,ldComboBox], False)]
    property idPessoa: integer  read FidPessoa write FidPessoa;

    [TColumn('nome','Fornecedor',350,[ldGrid], True, 'Pessoa', 'idPessoa', 'idPessoa')]
    property Nome: string  read FNome write FNome;

    [TColumn('vlGas','Valor Total',50,[ldGrid,ldLookup,ldComboBox], False)]
    property vlGas: currency  read FvlGas write FvlGas;

    Procedure ValidarCamposObrigatorios;

  end;
implementation

{ TPrecoGasVO }

Procedure TPrecoGasVO.ValidarCamposObrigatorios;
begin
  if (Self.FvlGas = 0) then
    raise Exception.Create('O campo Valor do Gás é obrigatório!')
  else if (self.FdtMesAno = 0) then
    raise Exception.Create('O campo data é obrigatório!')
  else if (self.idPessoa = 0 ) then
    raise Exception.Create('O campo Fornecedor é obrigatório!');

end;
end.

